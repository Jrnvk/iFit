function [coh] = coherent(self, sq)
      % iFunc_Sqw2D: coherent: compute the coherent scattering cross section from the incoherent and structure factor, in the Skold approximation
      %
      %   coh = coherent(inc, sq)
      %
      % compute: iFunc_Sqw2D incoherent S(q,w) + S(q) -> coherent S(q,w)
      %
      % The Skold approximation is:
      %
      %   Scoh(q,w) = Sinc(q/sqrt(S(q)), w) S(q)
      %
      % The result should be e.g. multiplied by the neutron scattering bound cross 
      % section 'sigma_coh' [barns].
      %
      % Reference: K. Skold, Phys. Rev. Lett. 19, 1023 (1967).
      %
      % input:
      %   inc: incoherent S(q,w) [iFunc_Sqw2D]
      %   sq:  S(q)              [double or 1D iFunc]
      %        can also be a single interatomic distance d-spacing
      % output:
      %   coh: coherent estimate [iFunc_Sqw2D]
      
      sq_iFunc = false; 
      if nargin > 1
        if isa(sq, 'iFunc') && ndims(sq) ==1
          sq_iFunc = true;
        end
      end
      if ~sq_iFunc
        sq = sf_hard_spheres;
        sq_iFunc = true;
      end
      
      % add parameters and expression

      % the symbol sq.Tag '_s' is generated by the binary op
      
      coh = [ 'sq=' sq.Tag '_s; x = x./sqrt(sq)' ] + self;  % prepend
      coh = sq.*coh; % this sets Parameters as needed

    end % coherent
